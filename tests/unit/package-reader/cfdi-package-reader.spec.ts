import { readFileSync } from 'fs';
import { Helpers } from '../../../src/internal/helpers';
import { CfdiPackageReader } from '../../../src/package-reader/cfdi-package-reader';
import { OpenZipFileException } from '../../../src/package-reader/exceptions/open-zip-file-exception';
import { TestCase } from '../../test-case';
/**
 * This tests uses the Zip file located at tests/_files/zip/cfdi.zip that contains:
 *
 * __MACOSX/ // commonly generated by MacOS when open the file
 * __MACOSX/.aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml // commonly generated by MacOS when open the file
 * aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml // valid cfdi with common name
 * aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml.xml // valid cfdi with double extension (oh my SAT!)
 * 00000000-0000-0000-0000-000000000000.xml // file with correct name but not a cfdi
 * empty-file // zero bytes file
 * other.txt // file with incorrect extension and incorrect content
 *
 */
describe('cfdi package reader', () => {
    test('reader zip when the content is invalid', async () => {
        const zipContents = 'INVALID_ZIP_CONTENT';
        await expect(CfdiPackageReader.createFromContents(zipContents)).rejects.toBeInstanceOf(OpenZipFileException);
    });
    test('reader zip when the content valid', async () => {
        const zipContents = TestCase.fileContents('zip/cfdi.zip');
        const cfdiPackageReader = await CfdiPackageReader.createFromContents(zipContents);
        const temporaryFileName = cfdiPackageReader.getFilename();
        expect(() => readFileSync(temporaryFileName)).toThrow(
            `ENOENT: no such file or directory, open '${temporaryFileName}'`
        );
    });

    test('reader zip with other files', async () => {
        let expectedFileNames = [
            'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml',
            'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml.xml'
        ];
        expectedFileNames = expectedFileNames.sort();

        const filename = TestCase.filePath('zip/cfdi.zip');
        const cfdiPackageReader = await CfdiPackageReader.createFromFile(filename);

        const objects = await Helpers.iteratorToObject(cfdiPackageReader.fileContents());
        const filenames = Object.keys(objects).sort();
        expect(filenames).toStrictEqual(expectedFileNames);
    });

    test('cfdi reader obtain first file as expected', async () => {
        const expectedCfdi = TestCase.fileContents('zip/cfdi.xml', 'utf8');

        const zipFileName = TestCase.filePath('zip/cfdi.zip');
        const cfdiPackageReader = await CfdiPackageReader.createFromFile(zipFileName);

        const cfdi = await Helpers.iteratorToObject(cfdiPackageReader.fileContents());
        expect(Object.values(cfdi)[0]).toBe(expectedCfdi);
    });

    test('create from file and contents', async () => {
        const filename = TestCase.filePath('zip/cfdi.zip');
        const first = await CfdiPackageReader.createFromFile(filename);
        expect(first.getFilename()).toBe(filename);

        const contents = TestCase.fileContents('zip/cfdi.zip');
        const second = await CfdiPackageReader.createFromContents(contents);

        expect(await Helpers.iteratorToObject(first.fileContents())).toStrictEqual(
            await Helpers.iteratorToObject(second.fileContents())
        );
    });

    const providerObtainUuidFromXmlCfdi = [
        [
            `
            <cfdi:Complemento>
                    <tfd:TimbreFiscalDigital UUID="ff833b27-c8ab-4c44-a559-2c197bdd4067"/>
            <cfdi:Complemento/>
        `,
            'ff833b27-c8ab-4c44-a559-2c197bdd4067'
        ],
        [
            `
            <cfdi:Complemento>
                <tfd:TimbreFiscalDigital UUID="FF833B27-C8AB-4C44-A559-2C197BDD4067"/>
            <cfdi:Complemento/>
        `,
            'ff833b27-c8ab-4c44-a559-2c197bdd4067'
        ],
        [
            `
            <cfdi:Complemento>
                <tfd:TimbreFiscalDigital a="a" UUID="ff833b27-c8ab-4c44-a559-2c197bdd4067" b="b"/>
            cfdi:Complemento/>
         `,
            'ff833b27-c8ab-4c44-a559-2c197bdd4067'
        ],
        [
            `
            <cfdi:Complemento>
                <tfd:TimbreFiscalDigital
                    UUID="ff833b27-c8ab-4c44-a559-2c197bdd4067"
                />
            <cfdi:Complemento/>
         `,
            'ff833b27-c8ab-4c44-a559-2c197bdd4067'
        ],
        [
            `
            <cfdi:Complemento>
                <tfd:TimbreFiscalDigital
                    UUID="ff833b27-ÑÑÑÑ-4c44-a559-2c197bdd4067"
                />
            <cfdi:Complemento/>
        `,
            ''
        ],
        ['', ''],
        ['invalid xml', ''],
        ['<xml/>', ''],
        [
            `
            <cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/3"
              xmlns:tfd="http://www.sat.gob.mx/TimbreFiscalDigital">
              <cfdi:CfdiRelacionados TipoRelacion="07">
                <cfdi:CfdiRelacionado UUID="afbef86d-d7af-4ef4-acfb-6aef8ddfa313"/>
              </cfdi:CfdiRelacionados>
              <cfdi:Complemento>
                <tfd:TimbreFiscalDigital UUID="000d04ba-18b8-4b78-b266-7fa7bdb24603"/>
              </cfdi:Complemento>
            </cfdi:Comprobante>
        `,
            '000d04ba-18b8-4b78-b266-7fa7bdb24603'
        ]
    ];
    test.each(providerObtainUuidFromXmlCfdi)(
        'provider obtain uuid from xml cfdi',
        (source: string, expected: string) => {
            const uuid = CfdiPackageReader.obtainUuidFromXmlCfdi(source);
            expect(uuid).toBe(expected);
        }
    );

    test('json', async () => {
        const zipFilename = TestCase.filePath('zip/cfdi.zip');
        const packageReader = await CfdiPackageReader.createFromFile(zipFilename);

        const jsonData = await packageReader.jsonSerialize();
        expect(jsonData.source).toBe(zipFilename);

        const expectedFiles = [
            'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml',
            'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml.xml'
        ].sort();
        const jsonDataFiles = jsonData.files;
        expect(Object.keys(jsonDataFiles).sort()).toStrictEqual(expectedFiles);

        const expectedCfdis = ['11111111-2222-3333-4444-000000000001'];
        const jsonDataCfdis = jsonData.cfdis;
        expect(Object.keys(jsonDataCfdis)).toStrictEqual(expectedCfdis);
    });
});
